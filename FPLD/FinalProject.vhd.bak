-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, the Altera Quartus Prime License Agreement,
-- the Altera MegaCore Function License Agreement, or other 
-- applicable license agreement, including, without limitation, 
-- that your use is for the sole purpose of programming logic 
-- devices manufactured by Altera and sold by Altera or its 
-- authorized distributors.  Please refer to the applicable 
-- agreement for further details.

-- Generated by Quartus Prime Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition
-- Created on Thu Dec 01 17:14:33 2022

LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY FinalProject IS
    PORT (
        reset : IN STD_LOGIC := '0';
        clock : IN STD_LOGIC;
        M500 : IN STD_LOGIC := '0';
        M1000 : IN STD_LOGIC := '0';
        T : OUT STD_LOGIC;
        Ca : OUT STD_LOGIC
    );
END FinalProject;

ARCHITECTURE BEHAVIOR OF FinalProject IS
    TYPE type_fstate IS (State0,State1500,State2000,State3000,State2500,State500,State1000);
    SIGNAL fstate : type_fstate;
    SIGNAL reg_fstate : type_fstate;
BEGIN
    PROCESS (clock,reg_fstate)
    BEGIN
        IF (clock='1' AND clock'event) THEN
            fstate <= reg_fstate;
        END IF;
    END PROCESS;

    PROCESS (fstate,reset,M500,M1000)
    BEGIN
        IF (reset='1') THEN
            reg_fstate <= State0;
            T <= '0';
            Ca <= '0';
        ELSE
            T <= '0';
            Ca <= '0';
            CASE fstate IS
                WHEN State0 =>
                    IF (((M500 = '0') AND (M1000 = '1'))) THEN
                        reg_fstate <= State1000;
                    ELSIF (((M500 = '1') AND (M1000 = '0'))) THEN
                        reg_fstate <= State500;
                    ELSIF (((M500 = '0') AND (M1000 = '0'))) THEN
                        reg_fstate <= State0;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= State0;
                    END IF;

                    T <= '0';

                    Ca <= '0';
                WHEN State1500 =>
                    IF (((M500 = '0') AND (M1000 = '1'))) THEN
                        reg_fstate <= State2500;
                    ELSIF (((M500 = '1') AND (M1000 = '0'))) THEN
                        reg_fstate <= State2000;
                    ELSIF (((M500 = '0') AND (M1000 = '0'))) THEN
                        reg_fstate <= State1500;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= State1500;
                    END IF;

                    T <= '0';

                    Ca <= '0';
                WHEN State2000 =>
                    IF (((M500 = '0') AND (M1000 = '1'))) THEN
                        reg_fstate <= State3000;
                    ELSIF (((M500 = '1') AND (M1000 = '0'))) THEN
                        reg_fstate <= State2500;
                    ELSIF (((M500 = '0') AND (M1000 = '0'))) THEN
                        reg_fstate <= State2000;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= State2000;
                    END IF;

                    T <= '0';

                    Ca <= '0';
                WHEN State3000 =>
                    IF (((M500 = '0') AND (M1000 = '0'))) THEN
                        reg_fstate <= State500;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= State3000;
                    END IF;

                    T <= '1';

                    Ca <= '1';
                WHEN State2500 =>
                    IF (((M500 = '0') AND (M1000 = '0'))) THEN
                        reg_fstate <= State0;
                    ELSIF (((M500 = '1') AND (M1000 = '0'))) THEN
                        reg_fstate <= State3000;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= State2500;
                    END IF;

                    T <= '1';

                    Ca <= '0';
                WHEN State500 =>
                    IF (((M500 = '0') AND (M1000 = '1'))) THEN
                        reg_fstate <= State1500;
                    ELSIF (((M500 = '1') AND (M1000 = '0'))) THEN
                        reg_fstate <= State1000;
                    ELSIF (((M500 = '0') AND (M1000 = '0'))) THEN
                        reg_fstate <= State500;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= State500;
                    END IF;

                    T <= '0';

                    Ca <= '0';
                WHEN State1000 =>
                    IF (((M500 = '1') AND (M1000 = '0'))) THEN
                        reg_fstate <= State1500;
                    ELSIF (((M500 = '0') AND (M1000 = '1'))) THEN
                        reg_fstate <= State2000;
                    ELSIF (((M500 = '0') AND (M1000 = '0'))) THEN
                        reg_fstate <= State1000;
                    -- Inserting 'else' block to prevent latch inference
                    ELSE
                        reg_fstate <= State1000;
                    END IF;

                    T <= '0';

                    Ca <= '0';
                WHEN OTHERS => 
                    T <= 'X';
                    Ca <= 'X';
                    report "Reach undefined state";
            END CASE;
        END IF;
    END PROCESS;
END BEHAVIOR;
